"""
匿名函数的两种形式：函数作为参数传递与lambda表达式

1. 
函数作为参数传递：将函数作为参数传递给另一个函数，在另一个函数中调用该函数
格式：
    def 函数名1(参数1, 参数2, ...):
        函数体
    
    def 函数名2(函数名1):
        包含函数名1的函数体

    函数名2(函数名1)
注：
函数2需要一个函数作为参数，这个函数需要接收多个参数进行处理，处理逻辑由该函数决定
函数1需要接收多个参数，其作为参数，传递给函数2
最终，函数2会调用函数1，并处理函数1的返回值
这是一种计算逻辑的传递，而非数据的传递

2. 
lambda表达式：定义匿名函数，即没有名字的函数
def关键字可以定义带有名称的函数，而lambda关键字可以定义匿名函数
匿名函数即lambda表达式一般只能使用一次
格式：
    lambda 参数1, 参数2, ...: 表达式
注：
参数1, 参数2, ...：表示匿名函数的形式参数
表达式即函数体，函数体只能写一行代码，且该行代码的执行结果即为匿名函数的返回值

Python 的四大高级函数： map(), filter(), reduce(), sorted()

1. map()函数：将函数应用于可迭代对象的每个元素，并返回一个迭代器
    格式：
        map(函数名, 可迭代对象1, 可迭代对象2, ...)
    注：
        函数名：需要应用于可迭代对象的函数
        可迭代对象1, 可迭代对象2, ...：需要被函数应用于的多个可迭代对象
    返回值：
        返回一个迭代器，该迭代器包含所有可迭代对象中对应位置元素经过函数处理后的结果
    
2. filter()函数：过滤可迭代对象中的元素，并返回一个迭代器
    格式：
        filter(函数名, 可迭代对象)
    注：
        函数名：需要应用于可迭代对象的函数
        可迭代对象：需要被函数应用于的可迭代对象
    返回值：
        返回一个迭代器，该迭代器包含所有可迭代对象中满足函数条件的元素

3. reduce()函数：将函数应用于可迭代对象的每个元素，并返回一个值
    格式：
        reduce(函数名, 可迭代对象)
    注：
        函数名：需要应用于可迭代对象的函数
        可迭代对象：需要被函数应用于的可迭代对象
    返回值：
        返回一个值，该值是所有可迭代对象中对应位置元素经过函数处理后的结果

4. sorted()函数：对可迭代对象中的元素进行排序，并返回一个列表
    格式：
        sorted(可迭代对象, key=None, reverse=False)
    注：
        可迭代对象：需要被排序的可迭代对象
        key ：排序的依据，即排序的依据函数
        reverse ：是否逆序排序，默认为 False ，即升序排序
    返回值：
        返回一个列表，该列表包含所有可迭代对象中元素经过排序后的结果

"""

# 1. 函数作为参数传递
def add(x, y):
    return x + y

def sub(x, y):
    return x - y

def calc(func, a, b):
    return func(a, b)

print(calc(add, 1, 2))
print(calc(sub, 1, 2))

# 2. lambda表达式
def calc2(func, a, b):
    return func(a, b)
# 使用lambda表达式定义匿名函数
print(calc2(lambda x, y: x + y, 1, 2))

# 3. Python 的四大高级函数
# map()函数
def add(x, y):
    return x + y

print(list(map(add, [1, 2, 3], [4, 5, 6]))) # [5, 7, 9]
# 也可以用lambda表达式定义匿名函数
print(list(map(lambda x, y: x + y, [1, 2, 3], [4, 5, 6]))) # [5, 7, 9]

# filter()函数
def is_odd(n):
    return n % 2 == 1

print(list(filter(is_odd, [1, 2, 3, 4, 5, 6, 7, 8, 9])))  # [1, 3, 5, 7, 9]
# 也可以用lambda表达式定义匿名函数
print(list(filter(lambda x: x % 2 == 1, [1, 2, 3, 4, 5, 6, 7, 8, 9])))  # [1, 3, 5, 7, 9]

# reduce()函数
# Python 3中，reduce()函数已经被移到了functools模块中
from functools import reduce
print(reduce(lambda x, y: x + y, [1, 2, 3, 4, 5]))  # 15
print(reduce(lambda x, y: x * y, [1, 2, 3, 4, 5]))  # 120

# sorted()函数
print(sorted([36, 5, -12, 9, -21]))  # [-21, -12, 5, 9, 36]
print(sorted([36, 5, -12, 9, -21], reverse=True))  # [36, 9, 5, -12, -21]