"""
1.字符串定义方法：
  ①单引号包围
  ②双引号包围
  ③三引号包围

三引号同样支持换行操作，变量未接收就属于注释，接受就属于字符串

2.字符串拼接：
  通过+号可以将了两个字符串（文本）字面量拼接在一起，一般用于变量与字符串或变量与变量之间的拼接

3.字符串格式化
  类似C语言的占位符
  %d 整型
  %s 字符串
  %f 浮点数
  注：关于浮点数的精度控制
    可以利用m.n来控制数字的精度
    m：控制数字的宽度，若设置的宽度小于数字本身的宽度，则不生效（一般不使用）
    n：控制小数的精度，进行数字的四舍五入

4.字符串快速格式化
  Python特有的更为快速的格式化输出字面量的方式
  特点：不限数据类型、不做精度控制
  格式：f"内容{变量}"

5.字符串格式化——表达式的格式化
  表达式：一条具有明确的执行结果的代码语句

"""

# 1
# 单引号定义：
name1 = '原神，启动！'
print(name1)

# 双引号定义：
name2 = "卧槽，op"
print(name2)

# 三引号定义：
name3 = """原神怎么你了"""
print(name3)


# 2
# 字符串之间的拼接
print("你竟敢" + "对原神" + "大不敬")

# 字符串与变量间的拼接
money = "648"
print("为了原神" + "我要充" + money)


# 3
# 通过格式化（即占位）拼接字符串与数字
game = "原神"
max_recharge = 648
now_recharge = 6.5
message = "玩%s就要冲%d，我还要冲%.2f万个648！" % (game, max_recharge, now_recharge)
print(message)

# 控制数字精度
# ① m
# 如下，%5d表示将整数的位数控制在5位
# 11不满五位，故前面会有三个空格；111111超过了五位，故不生效
num1 = 11
num2 = 111111
print("数字1:%5d 数字2:%5d" % (num1, num2))


# 4
# 利用Python的快速格式化输出
game = "原神"
max_recharge = 648
time_spent = 1500.64
# f即为format（格式化）的首字母
print(f"我爱玩{game}，我要为米哈游冲{max_recharge}，我已经玩了{time_spent}个小时的原神啦")


# 5
# 直接使用表达式输出
print("1000-7等于" + str(1000 - 7))
print("1000-7等于%d" % (1000 - 7))
print(f"1000-7等于{1000-7}")
